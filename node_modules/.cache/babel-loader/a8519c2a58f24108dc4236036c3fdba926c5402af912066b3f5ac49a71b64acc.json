{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aleem\\\\glutenapp\\\\gluten-free-checker\\\\src\\\\ProductDetail.js\",\n  _s = $RefreshSig$();\n// src/ProductDetail.js\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ProductDetail = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [product, setProduct] = useState(null);\n  const [alternatives, setAlternatives] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchProduct = async () => {\n      setIsLoading(true);\n      try {\n        const response = await axios.get(`https://world.openfoodfacts.org/api/v0/product/${id}.json`);\n        if (response.data && response.data.product) {\n          setProduct(response.data.product);\n          // Check if the product contains gluten\n          if (response.data.product.allergens_tags.includes('en:gluten')) {\n            fetchGlutenFreeAlternatives(response.data.product.product_name);\n          }\n        } else {\n          setError(\"Product not found\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching product details:\", error);\n        setError(\"Error fetching product details\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchProduct();\n  }, [id]);\n  const fetchGlutenFreeAlternatives = async productName => {\n    try {\n      const query = encodeURIComponent(`${productName} gluten free`);\n      const response = await axios.get(`https://world.openfoodfacts.org/cgi/search.pl?search_terms=${query}&action=process&json=1`);\n      setAlternatives(response.data.products.slice(0, 5)); // Limiting to 5 alternatives for simplicity\n    } catch (error) {\n      console.error(\"Error fetching gluten-free alternatives:\", error);\n      // Optionally handle this error state\n    }\n  };\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 27\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: product.product_name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), product.image_url && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: product.image_url,\n      alt: product.product_name,\n      style: {\n        maxWidth: '200px',\n        maxHeight: '200px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Brand: \", product.brands]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), product.ingredients_text && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Ingredients:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: product.ingredients_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), product.allergens_tags.includes('en:gluten') ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This product contains gluten.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Gluten-Free Alternatives:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: alternatives.length > 0 ? alternatives.map(alt => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [alt.image_url && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: alt.image_url,\n            alt: alt.product_name,\n            style: {\n              maxWidth: '100px',\n              maxHeight: '100px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 41\n          }, this), alt.product_name, \" - \", alt.brands]\n        }, alt.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 33\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No alternatives found.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This product is gluten-free.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(ProductDetail, \"sQxeDvMCCsey01gxEOjyWJdzjF4=\", false, function () {\n  return [useParams];\n});\n_c = ProductDetail;\nexport default ProductDetail;\nvar _c;\n$RefreshReg$(_c, \"ProductDetail\");","map":{"version":3,"names":["React","useState","useEffect","useParams","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","ProductDetail","_s","id","product","setProduct","alternatives","setAlternatives","isLoading","setIsLoading","error","setError","fetchProduct","response","get","data","allergens_tags","includes","fetchGlutenFreeAlternatives","product_name","console","productName","query","encodeURIComponent","products","slice","children","fileName","_jsxFileName","lineNumber","columnNumber","image_url","src","alt","style","maxWidth","maxHeight","brands","ingredients_text","length","map","_c","$RefreshReg$"],"sources":["C:/Users/Aleem/glutenapp/gluten-free-checker/src/ProductDetail.js"],"sourcesContent":["// src/ProductDetail.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst ProductDetail = () => {\r\n    const { id } = useParams();\r\n    const [product, setProduct] = useState(null);\r\n    const [alternatives, setAlternatives] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchProduct = async () => {\r\n            setIsLoading(true);\r\n            try {\r\n                const response = await axios.get(`https://world.openfoodfacts.org/api/v0/product/${id}.json`);\r\n                if (response.data && response.data.product) {\r\n                    setProduct(response.data.product);\r\n                    // Check if the product contains gluten\r\n                    if (response.data.product.allergens_tags.includes('en:gluten')) {\r\n                        fetchGlutenFreeAlternatives(response.data.product.product_name);\r\n                    }\r\n                } else {\r\n                    setError(\"Product not found\");\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error fetching product details:\", error);\r\n                setError(\"Error fetching product details\");\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchProduct();\r\n    }, [id]);\r\n\r\n    const fetchGlutenFreeAlternatives = async (productName) => {\r\n        try {\r\n            const query = encodeURIComponent(`${productName} gluten free`);\r\n            const response = await axios.get(`https://world.openfoodfacts.org/cgi/search.pl?search_terms=${query}&action=process&json=1`);\r\n            setAlternatives(response.data.products.slice(0, 5)); // Limiting to 5 alternatives for simplicity\r\n        } catch (error) {\r\n            console.error(\"Error fetching gluten-free alternatives:\", error);\r\n            // Optionally handle this error state\r\n        }\r\n    };\r\n\r\n    if (isLoading) return <div>Loading...</div>;\r\n    if (error) return <div>{error}</div>;\r\n\r\n    return (\r\n        <div>\r\n            <h2>{product.product_name}</h2>\r\n            {product.image_url && (\r\n                <img src={product.image_url} alt={product.product_name} style={{ maxWidth: '200px', maxHeight: '200px' }} />\r\n            )}\r\n            <p>Brand: {product.brands}</p>\r\n            {product.ingredients_text && (\r\n                <>\r\n                    <h3>Ingredients:</h3>\r\n                    <p>{product.ingredients_text}</p>\r\n                </>\r\n            )}\r\n            {product.allergens_tags.includes('en:gluten') ? (\r\n                <>\r\n                    <p>This product contains gluten.</p>\r\n                    <h3>Gluten-Free Alternatives:</h3>\r\n                    <ul>\r\n                        {alternatives.length > 0 ? (\r\n                            alternatives.map((alt) => (\r\n                                <li key={alt.id}>\r\n                                    {alt.image_url && (\r\n                                        <img src={alt.image_url} alt={alt.product_name} style={{ maxWidth: '100px', maxHeight: '100px' }} />\r\n                                    )}\r\n                                    {alt.product_name} - {alt.brands}\r\n                                </li>\r\n                            ))\r\n                        ) : (\r\n                            <p>No alternatives found.</p>\r\n                        )}\r\n                    </ul>\r\n                </>\r\n            ) : (\r\n                <p>This product is gluten-free.</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProductDetail;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}