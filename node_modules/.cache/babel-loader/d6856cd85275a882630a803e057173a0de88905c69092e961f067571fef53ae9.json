{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aleem\\\\glutenapp\\\\gluten-free-checker\\\\src\\\\Autocomplete.js\",\n  _s = $RefreshSig$();\n// Autocomplete.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Autocomplete = ({\n  onSelectProduct\n}) => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  useEffect(() => {\n    if (searchTerm.length > 2) {\n      const fetchProducts = async () => {\n        try {\n          const response = await axios.get(`https://world.openfoodfacts.org/cgi/search.pl?search_terms=${searchTerm}&search_simple=1&action=process&json=1`);\n          setSuggestions(response.data.products);\n        } catch (error) {\n          console.error(\"Error fetching products:\", error);\n        }\n      };\n      fetchProducts();\n    } else {\n      setSuggestions([]);\n    }\n  }, [searchTerm]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search for a product...\",\n      value: searchTerm,\n      onChange: e => setSearchTerm(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: suggestions.slice(0, 5).map(product => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => onSelectProduct(product),\n        children: product.product_name\n      }, product.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_s(Autocomplete, \"MEzfNgh2mNJZ8GpZWQ8coQHpFa0=\");\n_c = Autocomplete;\nexport default Autocomplete;\nvar _c;\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Autocomplete","onSelectProduct","_s","searchTerm","setSearchTerm","suggestions","setSuggestions","length","fetchProducts","response","get","data","products","error","console","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","slice","map","product","onClick","product_name","id","_c","$RefreshReg$"],"sources":["C:/Users/Aleem/glutenapp/gluten-free-checker/src/Autocomplete.js"],"sourcesContent":["// Autocomplete.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Autocomplete = ({ onSelectProduct }) => {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [suggestions, setSuggestions] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (searchTerm.length > 2) {\r\n            const fetchProducts = async () => {\r\n                try {\r\n                    const response = await axios.get(`https://world.openfoodfacts.org/cgi/search.pl?search_terms=${searchTerm}&search_simple=1&action=process&json=1`);\r\n                    setSuggestions(response.data.products);\r\n                } catch (error) {\r\n                    console.error(\"Error fetching products:\", error);\r\n                }\r\n            };\r\n            fetchProducts();\r\n        } else {\r\n            setSuggestions([]);\r\n        }\r\n    }, [searchTerm]);\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"text\" placeholder=\"Search for a product...\" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />\r\n            <ul>\r\n                {suggestions.slice(0, 5).map(product => (\r\n                    <li key={product.id} onClick={() => onSelectProduct(product)}>\r\n                        {product.product_name}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Autocomplete;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAElDC,SAAS,CAAC,MAAM;IACZ,IAAIO,UAAU,CAACI,MAAM,GAAG,CAAC,EAAE;MACvB,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;QAC9B,IAAI;UACA,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAE,8DAA6DP,UAAW,wCAAuC,CAAC;UAClJG,cAAc,CAACG,QAAQ,CAACE,IAAI,CAACC,QAAQ,CAAC;QAC1C,CAAC,CAAC,OAAOC,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QACpD;MACJ,CAAC;MACDL,aAAa,CAAC,CAAC;IACnB,CAAC,MAAM;MACHF,cAAc,CAAC,EAAE,CAAC;IACtB;EACJ,CAAC,EAAE,CAACH,UAAU,CAAC,CAAC;EAEhB,oBACIJ,OAAA;IAAAgB,QAAA,gBACIhB,OAAA;MAAOiB,IAAI,EAAC,MAAM;MAACC,WAAW,EAAC,yBAAyB;MAACC,KAAK,EAAEf,UAAW;MAACgB,QAAQ,EAAGC,CAAC,IAAKhB,aAAa,CAACgB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC9H1B,OAAA;MAAAgB,QAAA,EACKV,WAAW,CAACqB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAACC,OAAO,iBAChC7B,OAAA;QAAqB8B,OAAO,EAAEA,CAAA,KAAM5B,eAAe,CAAC2B,OAAO,CAAE;QAAAb,QAAA,EACxDa,OAAO,CAACE;MAAY,GADhBF,OAAO,CAACG,EAAE;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEf,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAACvB,EAAA,CAhCIF,YAAY;AAAAgC,EAAA,GAAZhC,YAAY;AAkClB,eAAeA,YAAY;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}