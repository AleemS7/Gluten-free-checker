{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aleem\\\\glutenapp\\\\gluten-free-checker\\\\src\\\\ProductDetail.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ProductDetail = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [product, setProduct] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [glutenInfo, setGlutenInfo] = useState('');\n  useEffect(() => {\n    setIsLoading(true);\n    axios.get(`https://world.openfoodfacts.org/api/v0/product/${id}.json`).then(response => {\n      if (response.data && response.data.product) {\n        setProduct(response.data.product);\n        checkIngredientsForGluten(response.data.product);\n      } else {\n        setError(\"Product not found\");\n      }\n      setIsLoading(false);\n    }).catch(err => {\n      setError(\"Error fetching product details\");\n      setIsLoading(false);\n    });\n  }, [id]);\n  useEffect(() => {\n    // This effect listens for changes to glutenInfo and updates the background color accordingly.\n    updateBackgroundColor();\n    return () => {\n      document.body.style.backgroundColor = ''; // Reset background color when the component unmounts\n    };\n  }, [glutenInfo]);\n  const checkIngredientsForGluten = product => {\n    const glutenIngredients = ['wheat', 'barley', 'rye', 'oats', 'malt', 'brewer’s yeast'];\n    const foundIngredients = glutenIngredients.filter(ingredient => {\n      var _product$ingredients_;\n      return (_product$ingredients_ = product.ingredients_text) === null || _product$ingredients_ === void 0 ? void 0 : _product$ingredients_.toLowerCase().includes(ingredient);\n    });\n    if (foundIngredients.length > 0) {\n      setGlutenInfo(`Contains gluten ingredients: ${foundIngredients.join(', ')}.`);\n    } else {\n      setGlutenInfo('No gluten ingredients found, but it is uncertain whether there is gluten or not.');\n    }\n  };\n  const updateBackgroundColor = () => {\n    if (glutenInfo.includes('Contains gluten ingredients')) {\n      document.body.style.backgroundColor = '#f8e0e0'; // Light red for products containing gluten\n    } else if (glutenInfo.includes('No gluten ingredients found')) {\n      document.body.style.backgroundColor = '#e0f8e0'; // Light green for products not containing gluten ingredients\n    } else {\n      document.body.style.backgroundColor = '#f8f0e0'; // Light orange for uncertain cases\n    }\n  };\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 27\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"product-detail\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(-1),\n      children: \"Back to Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: product.product_name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: product.image_url,\n      alt: product.product_name,\n      style: {\n        maxWidth: '200px',\n        maxHeight: '200px',\n        display: 'block',\n        margin: 'auto'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Brand: \", product.brands]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), product.ingredients_text && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Ingredients:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: product.ingredients_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: glutenInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 16\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(ProductDetail, \"Fpk2pKUa5qAA8vexNt8hp742JDk=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ProductDetail;\nexport default ProductDetail;\nvar _c;\n$RefreshReg$(_c, \"ProductDetail\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","ProductDetail","_s","id","navigate","product","setProduct","isLoading","setIsLoading","error","setError","glutenInfo","setGlutenInfo","get","then","response","data","checkIngredientsForGluten","catch","err","updateBackgroundColor","document","body","style","backgroundColor","glutenIngredients","foundIngredients","filter","ingredient","_product$ingredients_","ingredients_text","toLowerCase","includes","length","join","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","product_name","src","image_url","alt","maxWidth","maxHeight","display","margin","brands","_c","$RefreshReg$"],"sources":["C:/Users/Aleem/glutenapp/gluten-free-checker/src/ProductDetail.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst ProductDetail = () => {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n    const [product, setProduct] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [glutenInfo, setGlutenInfo] = useState('');\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        axios.get(`https://world.openfoodfacts.org/api/v0/product/${id}.json`)\r\n            .then(response => {\r\n                if (response.data && response.data.product) {\r\n                    setProduct(response.data.product);\r\n                    checkIngredientsForGluten(response.data.product);\r\n                } else {\r\n                    setError(\"Product not found\");\r\n                }\r\n                setIsLoading(false);\r\n            })\r\n            .catch(err => {\r\n                setError(\"Error fetching product details\");\r\n                setIsLoading(false);\r\n            });\r\n\r\n    }, [id]);\r\n\r\n    useEffect(() => {\r\n        // This effect listens for changes to glutenInfo and updates the background color accordingly.\r\n        updateBackgroundColor();\r\n        return () => {\r\n            document.body.style.backgroundColor = ''; // Reset background color when the component unmounts\r\n        };\r\n    }, [glutenInfo]);\r\n\r\n    const checkIngredientsForGluten = (product) => {\r\n        const glutenIngredients = ['wheat', 'barley', 'rye', 'oats', 'malt', 'brewer’s yeast'];\r\n        const foundIngredients = glutenIngredients.filter(ingredient =>\r\n            product.ingredients_text?.toLowerCase().includes(ingredient)\r\n        );\r\n\r\n        if (foundIngredients.length > 0) {\r\n            setGlutenInfo(`Contains gluten ingredients: ${foundIngredients.join(', ')}.`);\r\n        } else {\r\n            setGlutenInfo('No gluten ingredients found, but it is uncertain whether there is gluten or not.');\r\n        }\r\n    };\r\n\r\n    const updateBackgroundColor = () => {\r\n        if (glutenInfo.includes('Contains gluten ingredients')) {\r\n            document.body.style.backgroundColor = '#f8e0e0'; // Light red for products containing gluten\r\n        } else if (glutenInfo.includes('No gluten ingredients found')) {\r\n            document.body.style.backgroundColor = '#e0f8e0'; // Light green for products not containing gluten ingredients\r\n        } else {\r\n            document.body.style.backgroundColor = '#f8f0e0'; // Light orange for uncertain cases\r\n        }\r\n    };\r\n\r\n    if (isLoading) return <div>Loading...</div>;\r\n    if (error) return <div>{error}</div>;\r\n\r\n    return (\r\n        <div className=\"product-detail\">\r\n            <button onClick={() => navigate(-1)}>Back to Search</button>\r\n            <h2>{product.product_name}</h2>\r\n            <img src={product.image_url} alt={product.product_name} style={{ maxWidth: '200px', maxHeight: '200px', display: 'block', margin: 'auto' }} />\r\n            <p>Brand: {product.brands}</p>\r\n            {product.ingredients_text && (\r\n                <>\r\n                    <h3>Ingredients:</h3>\r\n                    <p>{product.ingredients_text}</p>\r\n                </>\r\n            )}\r\n            <p><strong>{glutenInfo}</strong></p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProductDetail;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}